services:
  proxy:
    build: ./proxy
    container_name: test-school-secretary-proxy
    ports:
      - 8080:80
    volumes:
      - test_api_static:/vol/web/static/
      - test_api_media:/vol/web/media/
    env_file:
      - ./proxy/.env
    depends_on:
      api:
        condition: service_healthy
      app:
        condition: service_healthy
    networks:
      - public
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/healthcheck || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s

  app:
    build:
      context: ./app
      dockerfile: Dockerfile.test
    container_name: test-school-secretary-app
    command: sh -c "node .next/standalone/server.js"
    volumes:
      - ./app:/app
      - test_app_node_modules:/app/node_modules
      - test_app_next:/app/.next
    environment:
      - NODE_ENV=test
    env_file:
      - ./app/.env
    depends_on:
      api:
        condition: service_healthy
    networks:
      - public
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -sf http://localhost:3000/healthcheck || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s

  api:
    build: ./api
    container_name: test-school-secretary-api
    command: sh -c "python manage.py collectstatic --noinput && \
      python manage.py makemigrations && \
      python manage.py migrate && \
      gunicorn School-Secretary.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - test_api_static:/vol/web/static/
      - test_api_media:/vol/web/media/
    env_file:
      - ./api/.env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - public
      - private
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python /api/healthcheck.py"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s

  db:
    build: ./db
    image: webcorvus/school-secretary-db:latest
    container_name: test-school-secretary-db
    volumes:
      - test_db_data:/var/lib/postgresql/data/
    env_file:
      - ./db/.env
    networks:
      - private
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s

networks:
  public:
    driver: bridge
  private:
    driver: bridge

volumes:
  test_db_data:
  test_api_static:
  test_api_media:
  test_app_node_modules:
  test_app_next:
